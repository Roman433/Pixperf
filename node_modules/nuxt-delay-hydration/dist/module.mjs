import { promises } from 'node:fs';
import { defineNuxtModule, createResolver, addComponentsDir, addTemplate, addPlugin } from '@nuxt/kit';
import { template } from 'lodash-es';

const NAME = "nuxt-delay-hydration";
const MODE_DELAY_APP_INIT = "init";
const MODE_DELAY_APP_MOUNT = "mount";
const MODE_DELAY_MANUAL = "manual";
const module = defineNuxtModule({
  meta: {
    name: NAME,
    configKey: "delayHydration",
    compatibility: {
      nuxt: "^3.5.0"
    }
  },
  defaults: {
    mode: MODE_DELAY_APP_MOUNT,
    hydrateOnEvents: [],
    include: [],
    exclude: [],
    postIdleTimeout: {
      mobile: 5e3,
      desktop: 4e3
    },
    idleCallbackTimeout: 7e3,
    debug: true,
    replayClick: false
  },
  async setup(options, nuxt) {
    if (!options.hydrateOnEvents.length) {
      options.hydrateOnEvents = [
        "mousemove",
        "scroll",
        "keydown",
        "click",
        "touchstart",
        "wheel"
      ];
    }
    const { resolve, resolvePath } = createResolver(import.meta.url);
    const runtimeDir = resolve("./runtime");
    nuxt.options.build.transpile.push(runtimeDir);
    await addComponentsDir({
      path: resolve("runtime/components"),
      extensions: ["vue"],
      transpile: true
    });
    if (!nuxt.options.ssr) {
      console.warn(`\`${NAME}\` will only work for SSR apps, disabling module.`);
      return;
    }
    if (!options.debug && nuxt.options.dev) {
      console.warn(`\`${NAME}\` only runs in dev with \`debug\` enabled, disabling module.`);
      return;
    }
    nuxt.options.build.transpile.push(resolve("./app"));
    const scripts = {};
    for (const s of ["global", "replay"]) {
      const scriptPath = await resolvePath(import.meta.url.endsWith("src/module.ts") ? `../dist/${s}` : `./${s}`);
      const scriptT = await promises.readFile(scriptPath, "utf-8");
      scripts[s] = template(scriptT)({ options });
    }
    const exports = `export const script = ${JSON.stringify(scripts.global, null, 2)}
export const replayScript = ${JSON.stringify(scripts.replay, null, 2)}
export const mode = '${options.mode}'
export const include = ${JSON.stringify(options.include)}
export const exclude = ${JSON.stringify(options.exclude)}
export const debug = ${JSON.stringify(options.debug)}`;
    const dst = addTemplate({
      filename: "delay-hydration.mjs",
      getContents: () => exports
    });
    nuxt.options.alias["#delay-hydration"] = dst.dst;
    nuxt.hooks.hook("nitro:config", (config) => {
      config.externals = config.externals || {};
      config.externals.inline = config.externals.inline || [];
      config.externals.inline.push(runtimeDir);
      config.virtual = config.virtual || {};
      config.virtual["#delay-hydration"] = exports;
      config.plugins = config.plugins || [];
      config.plugins.push(resolve(runtimeDir, "nitro-plugin"));
    });
    if (options.mode === MODE_DELAY_APP_MOUNT)
      addPlugin(resolve(runtimeDir, "mount-plugin.client"));
  }
});

export { MODE_DELAY_APP_INIT, MODE_DELAY_APP_MOUNT, MODE_DELAY_MANUAL, NAME, module as default };
